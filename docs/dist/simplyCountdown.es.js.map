{"version":3,"file":"simplyCountdown.es.js","sources":["../src/simplyCountdown.js"],"sourcesContent":["/* global Symbol */\n\n/*!\n* Project : simply-countdown\n* Date : 06/12/2024\n* License : MIT\n* Version : 2.0.1\n* Author : Vincent Loy <vincent.loy1@gmail.com>\n* Contributors :\n*  - Justin Beasley <JustinB@harvest.org>\n*  - Nathan Smith <NathanS@harvest.org>\n*/\n(function (exports) {\n    'use strict';\n\n    /**\n     * Function that merge user parameters with defaults one.\n     * @param output\n     * @returns {*|{}}\n     */\n    let extend = function (output) {\n        let obj;\n        let out = output || {};\n\n        for (let i = 1; i < arguments.length; i += 1) {\n            obj = arguments[i];\n            const keys = Object.keys(obj);\n\n            if (keys.length) {\n                for (let i2 = 0; i2 < keys.length; i2 += 1) {\n                    let key = keys[i2];\n\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        if (typeof obj[key] === 'object') {\n                            extend(out[key], obj[key]);\n                        } else {\n                            out[key] = obj[key];\n                        }\n                    }\n                }\n            }\n        }\n\n        return out;\n    };\n\n    let isIterableElement = (val) => {\n        return val !== null && Symbol.iterator in Object(val);\n    };\n\n    /**\n     * Function that create a countdown section\n     * @param countdown\n     * @param parameters\n     * @param typeClass\n     * @returns {{full: (*|Element), amount: (*|Element), word: (*|Element)}}\n     */\n    let createCountdownElt = (countdown, parameters, typeClass) => {\n        let sectionTag = document.createElement('div');\n        let amountTag = document.createElement('span');\n        let wordTag = document.createElement('span');\n        let innerSectionTag = document.createElement('div');\n\n        innerSectionTag.appendChild(amountTag);\n        innerSectionTag.appendChild(wordTag);\n        sectionTag.appendChild(innerSectionTag);\n\n        sectionTag.classList.add(parameters.sectionClass);\n        sectionTag.classList.add(typeClass);\n        amountTag.classList.add(parameters.amountClass);\n        wordTag.classList.add(parameters.wordClass);\n\n        countdown.appendChild(sectionTag);\n\n        return {\n            full: sectionTag,\n            amount: amountTag,\n            word: wordTag\n        };\n    };\n\n    /**\n     * Function that create full countdown DOM elements calling createCountdownElt\n     * @param parameters\n     * @param countdown\n     * @returns {{days:(*|Element), hours:(*|Element), minutes:(*|Element), seconds:(*|Element)}}\n     */\n    let createElements = (parameters, countdown) => {\n        let spanTag;\n\n        if (!parameters.inline) {\n            return {\n                days: createCountdownElt(countdown, parameters, 'simply-days-section'),\n                hours: createCountdownElt(countdown, parameters, 'simply-hours-section'),\n                minutes: createCountdownElt(countdown, parameters, 'simply-minutes-section'),\n                seconds: createCountdownElt(countdown, parameters, 'simply-seconds-section')\n            };\n        }\n\n        spanTag = document.createElement('span');\n        spanTag.classList.add(parameters.inlineClass);\n        return spanTag;\n    };\n\n    /**\n     * simplyCountdown, create and display the coundtown.\n     * @param elt\n     * @param args (parameters)\n     */\n    exports.simplyCountdown = (elt, args) => {\n        const eltProto = Object.getPrototypeOf(elt);\n        let parameters = extend({\n            year: 2015,\n            month: 6,\n            day: 28,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n            words: {\n                days: {lambda: (root, n) => {return n > 1 ? root + \"s\" : root }, root: 'day'},\n                hours: {lambda: (root, n) => {return n > 1 ? root + \"s\" : root }, root: 'hour'},\n                minutes: {lambda: (root, n) => {return n > 1 ? root + \"s\" : root }, root: 'minute'},\n                seconds: {lambda: (root, n) => {return n > 1 ? root + \"s\" : root }, root: 'second'}\n            },\n            plural: true,\n            inline: false,\n            inlineSeparator: ', ',\n            enableUtc: false,\n            onEnd: () => {\n            },\n            refresh: 1000,\n            inlineClass: 'simply-countdown-inline',\n            sectionClass: 'simply-section',\n            amountClass: 'simply-amount',\n            wordClass: 'simply-word',\n            zeroPad: false,\n            removeZeroUnits: false,\n            countUp: false\n        }, args);\n        let interval;\n        let targetDate;\n        let now;\n        let secondsLeft;\n        let days;\n        let hours;\n        let minutes;\n        let seconds;\n        let cd;\n\n        // console.log(typeof elt);\n        //\n        if (eltProto === String.prototype) {\n            cd = document.querySelectorAll(elt);\n        } else {\n            cd = elt;\n        }\n\n        if (parameters.enableUtc) {\n            // Use UTC for target date\n            targetDate = new Date(Date.UTC(\n                parameters.year,\n                parameters.month - 1,\n                parameters.day,\n                parameters.hours,\n                parameters.minutes,\n                parameters.seconds\n            ));\n        } else {\n            // Use local time for target date\n            targetDate = new Date(\n                parameters.year,\n                parameters.month - 1,\n                parameters.day,\n                parameters.hours,\n                parameters.minutes,\n                parameters.seconds\n            );\n        }\n\n        let runCountdown = (theCountdown) => {\n            let countdown = theCountdown;\n            let fullCountDown = createElements(parameters, countdown);\n            let refresh;\n\n            refresh = function () {\n                let dayWord;\n                let hourWord;\n                let minuteWord;\n                let secondWord;\n\n                let updateDisplayDate = () => {\n                    days = parseInt(secondsLeft / 86400, 10);\n                    secondsLeft %= 86400;\n\n                    hours = parseInt(secondsLeft / 3600, 10);\n                    secondsLeft %= 3600;\n\n                    minutes = parseInt(secondsLeft / 60, 10);\n                    seconds = parseInt(secondsLeft % 60, 10);\n                };\n\n                if (parameters.enableUtc) {\n                    // Calculate \"now\" in UTC\n                    now = new Date();\n                    now = new Date(Date.UTC(\n                        now.getUTCFullYear(),\n                        now.getUTCMonth(),\n                        now.getUTCDate(),\n                        now.getUTCHours(),\n                        now.getUTCMinutes(),\n                        now.getUTCSeconds()\n                    ));\n                } else {\n                    // Calculate \"now\" in local time\n                    now = new Date();\n                }\n\n                secondsLeft = Math.floor((targetDate - now.getTime()) / 1000);\n\n                if (secondsLeft > 0) {\n                    updateDisplayDate();\n                } else if (parameters.countUp) {\n                    secondsLeft = (now.getTime() - targetDate) / 1000;\n                    updateDisplayDate();\n                } else {\n                    days = 0;\n                    hours = 0;\n                    minutes = 0;\n                    seconds = 0;\n                    window.clearInterval(interval);\n                    parameters.onEnd();\n                }\n\n                let getWord = (obj, n) => {\n                    return obj.hasOwnProperty('lambda')\n                        ? obj.lambda(obj.root, n)\n                        : obj.root\n                };\n                let words = parameters.words;\n                dayWord = getWord(words.days, days);\n                hourWord = getWord(words.hours, hours);\n                minuteWord = getWord(words.minutes, minutes);\n                secondWord = getWord(words.seconds, seconds);\n\n                /* display an inline countdown into a span tag */\n                if (parameters.inline) {\n                    let displayStr = '';\n\n                    if (!(parameters.removeZeroUnits && days === 0)) {\n                        displayStr += `${days} ${dayWord}${parameters.inlineSeparator}`;\n                    }\n\n                    if (!(parameters.removeZeroUnits && days === 0 && hours === 0)) {\n                        displayStr += `${hours} ${hourWord}${parameters.inlineSeparator}`;\n                    }\n\n                    if (!(parameters.removeZeroUnits && days === 0 && hours === 0 && minutes === 0)) {\n                        displayStr += `${minutes} ${minuteWord}${parameters.inlineSeparator}`;\n                    }\n\n                    // Seconds should always be displayed\n                    displayStr += `${seconds} ${secondWord}`;\n\n                    countdown.innerHTML = displayStr.replace(/, $/, ''); // Remove trailing comma if any\n                } else {\n                    if (!(parameters.removeZeroUnits && days === 0)) {\n                        fullCountDown.days.amount.textContent = (parameters.zeroPad && days.toString().length < 2 ? '0' : '') + days;\n                        fullCountDown.days.word.textContent = dayWord;\n                        fullCountDown.days.full.style.display = '';\n                    } else {\n                        fullCountDown.days.full.style.display = 'none';\n                    }\n\n                    if (!(parameters.removeZeroUnits && days === 0 && hours === 0)) {\n                        fullCountDown.hours.amount.textContent = (parameters.zeroPad && hours.toString().length < 2 ? '0' : '') + hours;\n                        fullCountDown.hours.word.textContent = hourWord;\n                        fullCountDown.hours.full.style.display = '';\n                    } else {\n                        fullCountDown.hours.full.style.display = 'none';\n                    }\n\n                    if (!(parameters.removeZeroUnits && days === 0 && hours === 0 && minutes === 0)) {\n                        fullCountDown.minutes.amount.textContent = (parameters.zeroPad && minutes.toString().length < 2 ? '0' : '') + minutes;\n                        fullCountDown.minutes.word.textContent = minuteWord;\n                        fullCountDown.minutes.full.style.display = '';\n                    } else {\n                        fullCountDown.minutes.full.style.display = 'none';\n                    }\n\n                    // Seconds should always be displayed\n                    fullCountDown.seconds.amount.textContent = (parameters.zeroPad && seconds.toString().length < 2 ? '0' : '') + seconds;\n                    fullCountDown.seconds.word.textContent = secondWord;\n                    fullCountDown.seconds.full.style.display = '';\n                }\n            };\n\n            // Refresh immediately to prevent a Flash of Unstyled Content\n            refresh();\n            interval = window.setInterval(refresh, parameters.refresh);\n        };\n\n        if (!isIterableElement(cd)) {\n            runCountdown(cd);\n        } else {\n            Array.prototype.forEach.call(cd, (cdElt) => {\n                runCountdown(cdElt);\n            });\n        }\n    };\n}(window));\n\n/* global jQuery, simplyCountdown */\nif (window.jQuery) {\n    (function ($, simplyCountdown) {\n        'use strict';\n\n        function simplyCountdownify(el, options) {\n            simplyCountdown(el, options);\n        }\n\n        $.fn.simplyCountdown = function (options) {\n            return simplyCountdownify(this.selector, options);\n        };\n    }(jQuery, simplyCountdown));\n}\n"],"names":["exports","extend","output","obj","out","i","keys","i2","key","isIterableElement","val","createCountdownElt","countdown","parameters","typeClass","sectionTag","amountTag","wordTag","innerSectionTag","createElements","spanTag","elt","args","eltProto","root","n","interval","targetDate","now","secondsLeft","days","hours","minutes","seconds","cd","runCountdown","theCountdown","fullCountDown","refresh","dayWord","hourWord","minuteWord","secondWord","updateDisplayDate","getWord","words","displayStr","cdElt","$","simplyCountdown","simplyCountdownify","el","options"],"mappings":"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"}