{"version":3,"file":"simplyCountdown.es.js","sources":["../src/core/dom.ts","../src/core/simplyCountdown.ts"],"sourcesContent":["/**\n * Creates a countdown section element\n */\nexport const createCountdownSection = (\n    sectionClass: string,\n    amount: number,\n    word: string\n): HTMLElement => {\n    const section = document.createElement('div');\n    section.className = `simply-section ${sectionClass}`;\n\n    const wrap = document.createElement('div');\n    const amount_elem = document.createElement('span');\n    const word_elem = document.createElement('span');\n\n    amount_elem.className = 'simply-amount';\n    word_elem.className = 'simply-word';\n\n    amount_elem.textContent = String(amount);\n    word_elem.textContent = word;\n\n    wrap.appendChild(amount_elem);\n    wrap.appendChild(word_elem);\n    section.appendChild(wrap);\n\n    return section;\n};\n\n/**\n * Retrieves a countdown section element from a container\n */\nexport const getCountdownSection = (\n    sectionClass: string,\n    container: HTMLElement\n): HTMLElement | null => {\n    return container.querySelector(`.simply-section.${sectionClass}`);\n};\n\n/**\n * Updates a countdown section element\n */\nexport const updateCountdownSection = (\n    section: HTMLElement,\n    amount: number | string,\n    word: string\n): void => {\n    const amountElement = section.querySelector('.simply-amount');\n    const wordElement = section.querySelector('.simply-word');\n\n    if (amountElement) {\n        amountElement.textContent = String(amount);\n    }\n    if (wordElement) {\n        wordElement.textContent = word;\n    }\n};\n\n/**\n * Creates all countdown elements\n */\nexport const createCountdown = (\n    container: HTMLElement\n): {\n    days: HTMLElement;\n    hours: HTMLElement;\n    minutes: HTMLElement;\n    seconds: HTMLElement;\n} => {\n    const days = createCountdownSection('simply-days-section', 0, 'day');\n    const hours = createCountdownSection('simply-hours-section', 0, 'hour');\n    const minutes = createCountdownSection('simply-minutes-section', 0, 'minute');\n    const seconds = createCountdownSection('simply-seconds-section', 0, 'second');\n\n    container.appendChild(days);\n    container.appendChild(hours);\n    container.appendChild(minutes);\n    container.appendChild(seconds);\n\n    return {\n        days,\n        hours,\n        minutes,\n        seconds\n    };\n};\n","/*!\n * Project : simply-countdown\n * Date : 06/12/2024\n * License : MIT\n * Version : 2.0.1\n * Author : Vincent Loy-Serre <vincent.loy1@gmail.com>\n * Contributors :\n *  - Justin Beasley <JustinB@harvest.org>\n *  - Nathan Smith <NathanS@harvest.org>\n */\n\nimport type { CountdownParameters, CountdownSelector } from '../types';\nimport { createCountdown, updateCountdownSection } from './dom';\n\nconst defaultParams: CountdownParameters = {\n    year: 2024,\n    month: 12,\n    day: 25,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    words: {\n        days: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'day' },\n        hours: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'hour' },\n        minutes: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'minute' },\n        seconds: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'second' }\n    },\n    plural: true,\n    inline: false,\n    inlineSeparator: ', ',\n    enableUtc: false,\n    onEnd: () => {},\n    refresh: 1000,\n    inlineClass: 'simply-countdown-inline',\n    sectionClass: 'simply-section',\n    amountClass: 'simply-amount',\n    wordClass: 'simply-word',\n    zeroPad: false,\n    countUp: false,\n    removeZeroUnits: false\n};\n\nconst isNodeList = (element: CountdownSelector): element is NodeListOf<HTMLElement> => {\n    return element instanceof NodeList;\n};\n\nconst createCountdownInstance = (targetElement: HTMLElement, parameters: CountdownParameters) => {\n    const targetDate = new Date(\n        parameters.year,\n        parameters.month - 1,\n        parameters.day,\n        parameters.hours,\n        parameters.minutes,\n        parameters.seconds\n    );\n\n    // Créer un élément span pour le mode inline\n    let inlineElement: HTMLElement | null = null;\n    if (parameters.inline) {\n        inlineElement = document.createElement('span');\n        inlineElement.className = parameters.inlineClass;\n        targetElement.appendChild(inlineElement);\n    }\n\n    const countdown = parameters.inline ? null : createCountdown(targetElement);\n\n    const refresh = () => {\n        const currentDate = parameters.enableUtc ? new Date(new Date().toUTCString()) : new Date();\n        let diff = parameters.countUp\n            ? currentDate.getTime() - targetDate.getTime()\n            : targetDate.getTime() - currentDate.getTime();\n\n        if (diff <= 0 && !parameters.countUp) {\n            diff = 0;\n            if (parameters.onEnd) {\n                parameters.onEnd();\n            }\n        }\n\n        const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        diff -= days * 1000 * 60 * 60 * 24;\n\n        const hours = Math.floor(diff / (1000 * 60 * 60));\n        diff -= hours * 1000 * 60 * 60;\n\n        const minutes = Math.floor(diff / (1000 * 60));\n        diff -= minutes * 1000 * 60;\n\n        const seconds = Math.floor(diff / 1000);\n\n        if (parameters.inline && inlineElement) {\n            let displayStr = '';\n\n            if (!(parameters.removeZeroUnits && days === 0)) {\n                displayStr += `${days} ${parameters.words.days.lambda(parameters.words.days.root, days)}${parameters.inlineSeparator}`;\n            }\n\n            if (!(parameters.removeZeroUnits && days === 0 && hours === 0)) {\n                displayStr += `${hours} ${parameters.words.hours.lambda(parameters.words.hours.root, hours)}${parameters.inlineSeparator}`;\n            }\n\n            if (!(parameters.removeZeroUnits && days === 0 && hours === 0 && minutes === 0)) {\n                displayStr += `${minutes} ${parameters.words.minutes.lambda(parameters.words.minutes.root, minutes)}${parameters.inlineSeparator}`;\n            }\n\n            displayStr += `${seconds} ${parameters.words.seconds.lambda(parameters.words.seconds.root, seconds)}`;\n\n            inlineElement.innerHTML = displayStr.replace(new RegExp(`${parameters.inlineSeparator}$`), '');\n        } else if (countdown) {\n            const values = [\n                { value: days, section: countdown.days, word: parameters.words.days },\n                { value: hours, section: countdown.hours, word: parameters.words.hours },\n                { value: minutes, section: countdown.minutes, word: parameters.words.minutes },\n                { value: seconds, section: countdown.seconds, word: parameters.words.seconds }\n            ];\n\n            values.forEach(({ value, section, word }) => {\n                if (!parameters.removeZeroUnits || value > 0) {\n                    const displayValue = parameters.zeroPad ? String(value).padStart(2, '0') : value;\n                    const wordValue = word.lambda(word.root, value);\n                    updateCountdownSection(section, displayValue, wordValue);\n                    section.style.display = '';\n                } else {\n                    section.style.display = 'none';\n                }\n            });\n        }\n    };\n\n    const interval = setInterval(refresh, parameters.refresh);\n    refresh();\n\n    // Cleanup on element removal\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            mutation.removedNodes.forEach((node) => {\n                if (node === targetElement) {\n                    clearInterval(interval);\n                    observer.disconnect();\n                }\n            });\n        });\n    });\n\n    if (targetElement.parentNode) {\n        observer.observe(targetElement.parentNode, { childList: true });\n    }\n};\n\nexport const simplyCountdown = (\n    element: CountdownSelector,\n    args: Partial<CountdownParameters> = defaultParams\n): void => {\n    const parameters: CountdownParameters = { ...defaultParams, ...args };\n\n    if (typeof element === 'string') {\n        const elements = document.querySelectorAll<HTMLElement>(element);\n        elements.forEach((el) => createCountdownInstance(el, parameters));\n    } else if (isNodeList(element)) {\n        element.forEach((el) => createCountdownInstance(el, parameters));\n    } else {\n        createCountdownInstance(element, parameters);\n    }\n};\n\n// UMD export\ndeclare global {\n    interface Window {\n        simplyCountdown: typeof simplyCountdown;\n    }\n}\n\nif (typeof window !== 'undefined') {\n    window.simplyCountdown = simplyCountdown;\n}"],"names":[],"mappings":"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"}