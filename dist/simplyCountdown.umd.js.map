{"version":3,"file":"simplyCountdown.umd.js","sources":["../src/core/dom.ts","../src/core/simplyCountdown.ts","../src/core/simplyCountdown.umd.ts"],"sourcesContent":["/**\n * Creates a countdown section element\n */\nexport const createCountdownSection = (\n    sectionClass: string,\n    amountClass: string,\n    wordClass: string,\n    amount: number,\n    word: string,\n    params: {\n        sectionClass: string;\n        amountClass: string;\n        wordClass: string;\n    }\n): HTMLElement => {\n    const section = document.createElement('div');\n    section.className = `${sectionClass} ${params.sectionClass}`;\n\n    const wrap = document.createElement('div');\n    const amount_elem = document.createElement('span');\n    const word_elem = document.createElement('span');\n\n    amount_elem.className = `${amountClass} ${params.amountClass}`;\n    word_elem.className = `${wordClass} ${params.wordClass}`;\n\n    amount_elem.textContent = String(amount);\n    word_elem.textContent = word;\n\n    wrap.appendChild(amount_elem);\n    wrap.appendChild(word_elem);\n    section.appendChild(wrap);\n\n    return section;\n};\n\n/**\n * Retrieves a countdown section element from a container\n */\nexport const getCountdownSection = (\n    sectionClass: string,\n    container: HTMLElement\n): HTMLElement | null => {\n    return container.querySelector(`.simply-section.${sectionClass}`);\n};\n\n/**\n * Updates a countdown section element\n */\nexport const updateCountdownSection = (\n    section: HTMLElement,\n    amount: number | string,\n    word: string\n): void => {\n    const amountElement = section.querySelector('.simply-amount');\n    const wordElement = section.querySelector('.simply-word');\n\n    if (amountElement) {\n        amountElement.textContent = String(amount);\n    }\n    if (wordElement) {\n        wordElement.textContent = word;\n    }\n};\n\n/**\n * Creates all countdown elements\n */\nexport const createCountdown = (\n    container: HTMLElement,\n    params: {\n        sectionClass: string;\n        amountClass: string;\n        wordClass: string;\n    }\n): {\n    days: HTMLElement;\n    hours: HTMLElement;\n    minutes: HTMLElement;\n    seconds: HTMLElement;\n} => {\n\n    const amountCls = 'simply-amount';\n    const wordCls = 'simply-word';\n    \n    const days = createCountdownSection('simply-section simply-days-section', amountCls, wordCls, 0, 'day', params);\n    const hours = createCountdownSection('simply-section simply-hours-section', amountCls, wordCls, 0, 'hour', params);\n    const minutes = createCountdownSection('simply-section simply-minutes-section', amountCls, wordCls, 0, 'minute', params);\n    const seconds = createCountdownSection('simply-section simply-seconds-section', amountCls, wordCls, 0, 'second', params);\n\n    container.appendChild(days);\n    container.appendChild(hours);\n    container.appendChild(minutes);\n    container.appendChild(seconds);\n\n    return {\n        days,\n        hours,\n        minutes,\n        seconds\n    };\n};\n","/*!\n * Project : simplyCountdown\n * Date : 2024-12-24\n * License : MIT\n * Version : 3.0.0\n * Author : Vincent Loy-Serre <vincent.loy1@gmail.com>\n * Contributors :\n *  - Justin Beasley <JustinB@harvest.org>\n *  - Nathan Smith <NathanS@harvest.org>\n */\n\nimport type { CountdownParameters, CountdownSelector, CountdownState, CountdownController, CountdownControllerArray } from '../types';\nimport { createCountdown, updateCountdownSection } from './dom';\n\nconst defaultParams: CountdownParameters = {\n    year: 2024,\n    month: 12,\n    day: 25,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    words: {\n        days: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'day' },\n        hours: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'hour' },\n        minutes: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'minute' },\n        seconds: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'second' }\n    },\n    plural: true,\n    inline: false,\n    inlineSeparator: ', ',\n    enableUtc: false,\n    onEnd: () => {},\n    refresh: 1000,\n    inlineClass: 'simply-countdown-inline',\n    sectionClass: 'simply-section',\n    amountClass: 'simply-amount',\n    wordClass: 'simply-word',\n    zeroPad: false,\n    countUp: false,\n    removeZeroUnits: false,\n    onStop: () => {},\n    onResume: () => {},\n    onUpdate: () => {},\n};\n\nconst isNodeList = (element: CountdownSelector): element is NodeListOf<HTMLElement> => {\n    return element instanceof NodeList;\n};\n\ninterface TimeUnit {\n    value: number;\n    word: keyof CountdownParameters['words'];\n    element?: HTMLElement;\n}\n\n/**\n * Formats a time unit with optional zero padding and pluralization\n * @param unit - The time unit object containing value and word properties\n * @param params - The countdown parameters containing formatting options and word definitions\n * @returns A formatted string containing the value and pluralized word for the time unit\n * @example\n * // With zeroPad: true\n * formatTimeUnit({value: 5, word: 'days'}, params) // returns \"05 days\"\n * // With zeroPad: false\n * formatTimeUnit({value: 5, word: 'days'}, params) // returns \"5 days\"\n */\nfunction formatTimeUnit(unit: TimeUnit, params: CountdownParameters): string {\n    const value = params.zeroPad ? String(unit.value).padStart(2, '0') : unit.value;\n    return `${value} ${params.words[unit.word].lambda(params.words[unit.word].root, unit.value)}`;\n}\n\n/**\n * Determines whether a time unit should be displayed based on its value and the values of previous units\n * @param unit - The current time unit to evaluate\n * @param previousUnits - Array of time units that come before the current unit\n * @param params - Configuration parameters for the countdown\n * @returns True if the unit should be displayed, false otherwise\n * \n * If removeZeroUnits is false in params, always returns true.\n * Otherwise, returns true if either:\n * - The current unit value is not zero\n * - Any previous unit has a non-zero value\n */\nfunction shouldDisplay(unit: TimeUnit, previousUnits: TimeUnit[], params: CountdownParameters): boolean {\n    if (!params.removeZeroUnits) return true;\n    return unit.value !== 0 || previousUnits.some(u => u.value !== 0);\n}\n\n/**\n * Displays the countdown timer inline within the specified HTML element.\n * \n * @param timeUnits - Array of time units containing values and labels for display\n * @param params - Configuration parameters for the countdown display\n * @param element - The HTML element where the countdown will be rendered\n * \n * @remarks\n * The function filters and formats time units based on display rules, then joins them with\n * the specified separator from params.inlineSeparator before setting the element's innerHTML.\n */\nfunction displayInline(timeUnits: TimeUnit[], params: CountdownParameters, element: HTMLElement): void {\n    const displayStr = timeUnits\n        .filter((unit, index) => shouldDisplay(unit, timeUnits.slice(0, index), params))\n        .map(unit => formatTimeUnit(unit as { value: number; word: keyof typeof params.words }, params))\n        .join(params.inlineSeparator);\n\n    element.innerHTML = displayStr;\n}\n\n/**\n * Updates the display of time units in the countdown based on their values and display conditions\n * @param timeUnits - Array of TimeUnit objects containing the time values and their corresponding words\n * @param params - Configuration parameters for the countdown display\n * @param countdown - DOM elements representing the countdown display sections\n * @returns void\n *\n * @remarks\n * This function iterates through each time unit and determines whether it should be shown based on:\n * - If it's the seconds unit (always shown)\n * - If it meets display criteria based on previous units\n * \n * For units that should be shown, it:\n * - Updates the display value (with optional zero padding)\n * - Updates the word label using the configured lambda function\n * - Shows the unit's DOM element\n * \n * For units that shouldn't be shown, it hides their DOM elements\n */\nfunction displayBlocks(timeUnits: TimeUnit[], params: CountdownParameters, countdown: any): void {\n    timeUnits.forEach((unit, index) => {\n        const shouldShow = unit.word === 'seconds' || shouldDisplay(unit, timeUnits.slice(0, index), params);\n        \n        if (shouldShow) {\n            updateCountdownSection(\n                countdown[unit.word],\n                params.zeroPad ? String(unit.value).padStart(2, '0') : unit.value,\n                params.words[unit.word].lambda(params.words[unit.word].root, unit.value)\n            );\n            countdown[unit.word].style.display = '';\n        } else {\n            countdown[unit.word].style.display = 'none';\n        }\n    });\n}\n\nconst createCountdownInstance = (\n    targetElement: HTMLElement, \n    parameters: CountdownParameters\n): CountdownController => {\n    let state: CountdownState = {\n        isPaused: false,\n        interval: null,\n        targetDate: new Date()\n    };\n\n    const getTargetDate = (params: CountdownParameters): Date => {\n        return params.enableUtc \n            ? new Date(Date.UTC(\n                params.year,\n                params.month - 1,\n                params.day,\n                params.hours,\n                params.minutes,\n                params.seconds\n            ))\n            : new Date(\n                params.year,\n                params.month - 1,\n                params.day,\n                params.hours,\n                params.minutes,\n                params.seconds\n            );\n    };\n\n    state.targetDate = getTargetDate(parameters);\n\n    // Create span element for inline mode\n    let inlineElement: HTMLElement | null = null;\n    if (parameters.inline) {\n        inlineElement = document.createElement('span');\n        inlineElement.className = parameters.inlineClass;\n        targetElement.appendChild(inlineElement);\n    }\n\n    const countdown = parameters.inline ? null : createCountdown(targetElement, {\n        sectionClass: parameters.sectionClass,\n        amountClass: parameters.amountClass,\n        wordClass: parameters.wordClass\n    });\n\n    const refresh = () => {\n        // Fix UTC current date handling\n        const currentDate = parameters.enableUtc \n            ? new Date(Date.UTC(\n                new Date().getUTCFullYear(),\n                new Date().getUTCMonth(),\n                new Date().getUTCDate(),\n                new Date().getUTCHours(),\n                new Date().getUTCMinutes(),\n                new Date().getUTCSeconds()\n            ))\n            : new Date();\n\n        let diff = parameters.countUp\n            ? currentDate.getTime() - state.targetDate.getTime()\n            : state.targetDate.getTime() - currentDate.getTime();\n\n        if (diff <= 0 && !parameters.countUp) {\n            diff = 0;\n            // Clear interval before calling onEnd to prevent multiple calls\n            clearInterval(state.interval);\n            if (parameters.onEnd) {\n                parameters.onEnd();\n            }\n        }\n\n        const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        diff -= days * 1000 * 60 * 60 * 24;\n\n        const hours = Math.floor(diff / (1000 * 60 * 60));\n        diff -= hours * 1000 * 60 * 60;\n\n        const minutes = Math.floor(diff / (1000 * 60));\n        diff -= minutes * 1000 * 60;\n\n        const seconds = Math.floor(diff / 1000);\n\n        if (parameters.inline && inlineElement) {\n            const timeUnits: TimeUnit[] = [\n                { value: days, word: 'days' as keyof CountdownParameters['words'] },\n                { value: hours, word: 'hours' as keyof CountdownParameters['words'] },\n                { value: minutes, word: 'minutes' as keyof CountdownParameters['words'] },\n                { value: seconds, word: 'seconds' as keyof CountdownParameters['words'] }\n            ];\n            displayInline(timeUnits, parameters, inlineElement);\n        } else if (countdown) {\n            const timeUnits: TimeUnit[] = [\n                { value: days, word: 'days' as keyof CountdownParameters['words'] },\n                { value: hours, word: 'hours' as keyof CountdownParameters['words'] },\n                { value: minutes, word: 'minutes' as keyof CountdownParameters['words'] },\n                { value: seconds, word: 'seconds' as keyof CountdownParameters['words'] }\n            ];\n            displayBlocks(timeUnits, parameters, countdown);\n        }\n    };\n\n    const startInterval = () => {\n        state.interval = setInterval(refresh, parameters.refresh);\n        refresh();\n    };\n\n    const stopCountdown = () => {\n        if (state.interval) {\n            clearInterval(state.interval);\n            state.interval = null;\n        }\n        state.isPaused = true;\n        parameters.onStop?.();\n    };\n\n    const resumeCountdown = () => {\n        if (state.isPaused) {\n            startInterval();\n            state.isPaused = false;\n            parameters.onResume?.();\n        }\n    };\n\n    const updateCountdown = (newParams: Partial<CountdownParameters>) => {\n        Object.assign(parameters, newParams);\n        if (newParams.year !== undefined || \n            newParams.month !== undefined || \n            newParams.day !== undefined ||\n            newParams.hours !== undefined ||\n            newParams.minutes !== undefined ||\n            newParams.seconds !== undefined) {\n            state.targetDate = getTargetDate(parameters);\n        }\n        \n        parameters.onUpdate?.(newParams);\n        \n        if (!state.isPaused) {\n            if (state.interval) {\n                clearInterval(state.interval);\n            }\n            startInterval();\n        }\n    };\n\n    const getState = () => ({ ...state });\n\n    // Start the countdown\n    startInterval();\n\n    // Cleanup on element removal\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            mutation.removedNodes.forEach((node) => {\n                if (node === targetElement) {\n                    clearInterval(state.interval);\n                    observer.disconnect();\n                }\n            });\n        });\n    });\n\n    if (targetElement.parentNode) {\n        observer.observe(targetElement.parentNode, { childList: true });\n    }\n\n    // Return controller object\n    return {\n        stopCountdown,\n        resumeCountdown,\n        updateCountdown,\n        getState\n    };\n};\n\nconst createControllerArray = (controllers: CountdownController[]): CountdownControllerArray => {\n    const array = controllers as CountdownControllerArray;\n    \n    array.stopCountdown = () => controllers.forEach(c => c.stopCountdown());\n    array.resumeCountdown = () => controllers.forEach(c => c.resumeCountdown());\n    array.updateCountdown = (newParams) => controllers.forEach(c => c.updateCountdown(newParams));\n    array.getState = () => controllers.map(c => c.getState());\n    \n    return array;\n};\n\nconst simplyCountdown = (\n    element: CountdownSelector,\n    args: Partial<CountdownParameters> = defaultParams\n): CountdownController | CountdownControllerArray => {\n    const parameters: CountdownParameters = { ...defaultParams, ...args };\n\n    if (typeof element === 'string') {\n        const elements = document.querySelectorAll<HTMLElement>(element);\n        const controllers = Array.from(elements).map(el => createCountdownInstance(el, parameters));\n        return controllers.length === 1 ? controllers[0] : createControllerArray(controllers);\n    }\n    \n    if (isNodeList(element)) {\n        const controllers = Array.from(element).map(el => createCountdownInstance(el, parameters));\n        return controllers.length === 1 ? controllers[0] : createControllerArray(controllers);\n    }\n    \n    return createCountdownInstance(element, parameters);\n};\n\nexport default simplyCountdown;\n","import simplyCountdownCore from './simplyCountdown';\n\n// @ts-ignore\nif (typeof define === 'function' && define.amd) {\n    // AMD\n    define(function() {\n        return simplyCountdownCore;\n    });\n} else if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = simplyCountdownCore;\n} else {\n    // Browser\n    (window as any).simplyCountdown = simplyCountdownCore;\n}\n\n// Export for Vite/Rollup\nexport default simplyCountdownCore;\n"],"names":["createCountdownSection","sectionClass","amountClass","wordClass","amount","word","params","section","document","createElement","className","wrap","amount_elem","word_elem","textContent","String","appendChild","defaultParams","year","month","day","hours","minutes","seconds","words","days","lambda","root","n","plural","inline","inlineSeparator","enableUtc","onEnd","refresh","inlineClass","zeroPad","countUp","removeZeroUnits","onStop","onResume","onUpdate","shouldDisplay","unit","previousUnits","value","some","u","displayInline","timeUnits","element","displayStr","filter","index","slice","map","padStart","formatTimeUnit","join","innerHTML","displayBlocks","countdown","forEach","amountElement","querySelector","wordElement","updateCountdownSection","style","display","createCountdownInstance","targetElement","parameters","state","isPaused","interval","targetDate","Date","getTargetDate","UTC","inlineElement","container","amountCls","wordCls","createCountdown","currentDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","diff","getTime","clearInterval","Math","floor","startInterval","setInterval","observer","MutationObserver","mutations","mutation","removedNodes","node","disconnect","parentNode","observe","childList","stopCountdown","_a","call","resumeCountdown","updateCountdown","newParams","Object","assign","getState","createControllerArray","controllers","array","c","simplyCountdown","args","elements","querySelectorAll","Array","from","el","length","NodeList","isNodeList","define","amd","simplyCountdownCore","module","exports","window"],"mappings":"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"}