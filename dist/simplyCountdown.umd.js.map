{"version":3,"file":"simplyCountdown.umd.js","sources":["../src/core/dom.ts","../src/core/simplyCountdown.ts"],"sourcesContent":["/**\n * Creates a countdown section element\n */\nexport const createCountdownSection = (\n    sectionClass: string,\n    amount: number,\n    word: string\n): HTMLElement => {\n    const section = document.createElement('div');\n    section.className = `simply-section ${sectionClass}`;\n\n    const wrap = document.createElement('div');\n    const amount_elem = document.createElement('span');\n    const word_elem = document.createElement('span');\n\n    amount_elem.className = 'simply-amount';\n    word_elem.className = 'simply-word';\n\n    amount_elem.textContent = String(amount);\n    word_elem.textContent = word;\n\n    wrap.appendChild(amount_elem);\n    wrap.appendChild(word_elem);\n    section.appendChild(wrap);\n\n    return section;\n};\n\n/**\n * Retrieves a countdown section element from a container\n */\nexport const getCountdownSection = (\n    sectionClass: string,\n    container: HTMLElement\n): HTMLElement | null => {\n    return container.querySelector(`.simply-section.${sectionClass}`);\n};\n\n/**\n * Updates a countdown section element\n */\nexport const updateCountdownSection = (\n    section: HTMLElement,\n    amount: number | string,\n    word: string\n): void => {\n    const amountElement = section.querySelector('.simply-amount');\n    const wordElement = section.querySelector('.simply-word');\n\n    if (amountElement) {\n        amountElement.textContent = String(amount);\n    }\n    if (wordElement) {\n        wordElement.textContent = word;\n    }\n};\n\n/**\n * Creates all countdown elements\n */\nexport const createCountdown = (\n    container: HTMLElement\n): {\n    days: HTMLElement;\n    hours: HTMLElement;\n    minutes: HTMLElement;\n    seconds: HTMLElement;\n} => {\n    const days = createCountdownSection('simply-days-section', 0, 'day');\n    const hours = createCountdownSection('simply-hours-section', 0, 'hour');\n    const minutes = createCountdownSection('simply-minutes-section', 0, 'minute');\n    const seconds = createCountdownSection('simply-seconds-section', 0, 'second');\n\n    container.appendChild(days);\n    container.appendChild(hours);\n    container.appendChild(minutes);\n    container.appendChild(seconds);\n\n    return {\n        days,\n        hours,\n        minutes,\n        seconds\n    };\n};\n","/*!\n * Project : simply-countdown\n * Date : 06/12/2024\n * License : MIT\n * Version : 2.0.1\n * Author : Vincent Loy-Serre <vincent.loy1@gmail.com>\n * Contributors :\n *  - Justin Beasley <JustinB@harvest.org>\n *  - Nathan Smith <NathanS@harvest.org>\n */\n\nimport type { CountdownParameters, CountdownSelector } from '../types';\nimport { createCountdown, updateCountdownSection } from './dom';\n\nconst defaultParams: CountdownParameters = {\n    year: 2024,\n    month: 12,\n    day: 25,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    words: {\n        days: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'day' },\n        hours: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'hour' },\n        minutes: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'minute' },\n        seconds: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'second' }\n    },\n    plural: true,\n    inline: false,\n    inlineSeparator: ', ',\n    enableUtc: false,\n    onEnd: () => {},\n    refresh: 1000,\n    inlineClass: 'simply-countdown-inline',\n    sectionClass: 'simply-section',\n    amountClass: 'simply-amount',\n    wordClass: 'simply-word',\n    zeroPad: false,\n    countUp: false,\n    removeZeroUnits: false\n};\n\nconst isNodeList = (element: CountdownSelector): element is NodeListOf<HTMLElement> => {\n    return element instanceof NodeList;\n};\n\nconst createCountdownInstance = (targetElement: HTMLElement, parameters: CountdownParameters) => {\n    const targetDate = new Date(\n        parameters.year,\n        parameters.month - 1,\n        parameters.day,\n        parameters.hours,\n        parameters.minutes,\n        parameters.seconds\n    );\n\n    // Créer un élément span pour le mode inline\n    let inlineElement: HTMLElement | null = null;\n    if (parameters.inline) {\n        inlineElement = document.createElement('span');\n        inlineElement.className = parameters.inlineClass;\n        targetElement.appendChild(inlineElement);\n    }\n\n    const countdown = parameters.inline ? null : createCountdown(targetElement);\n\n    const refresh = () => {\n        const currentDate = parameters.enableUtc ? new Date(new Date().toUTCString()) : new Date();\n        let diff = parameters.countUp\n            ? currentDate.getTime() - targetDate.getTime()\n            : targetDate.getTime() - currentDate.getTime();\n\n        if (diff <= 0 && !parameters.countUp) {\n            diff = 0;\n            if (parameters.onEnd) {\n                parameters.onEnd();\n            }\n        }\n\n        const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        diff -= days * 1000 * 60 * 60 * 24;\n\n        const hours = Math.floor(diff / (1000 * 60 * 60));\n        diff -= hours * 1000 * 60 * 60;\n\n        const minutes = Math.floor(diff / (1000 * 60));\n        diff -= minutes * 1000 * 60;\n\n        const seconds = Math.floor(diff / 1000);\n\n        if (parameters.inline && inlineElement) {\n            let displayStr = '';\n\n            if (!(parameters.removeZeroUnits && days === 0)) {\n                displayStr += `${days} ${parameters.words.days.lambda(parameters.words.days.root, days)}${parameters.inlineSeparator}`;\n            }\n\n            if (!(parameters.removeZeroUnits && days === 0 && hours === 0)) {\n                displayStr += `${hours} ${parameters.words.hours.lambda(parameters.words.hours.root, hours)}${parameters.inlineSeparator}`;\n            }\n\n            if (!(parameters.removeZeroUnits && days === 0 && hours === 0 && minutes === 0)) {\n                displayStr += `${minutes} ${parameters.words.minutes.lambda(parameters.words.minutes.root, minutes)}${parameters.inlineSeparator}`;\n            }\n\n            displayStr += `${seconds} ${parameters.words.seconds.lambda(parameters.words.seconds.root, seconds)}`;\n\n            inlineElement.innerHTML = displayStr.replace(new RegExp(`${parameters.inlineSeparator}$`), '');\n        } else if (countdown) {\n            const values = [\n                { value: days, section: countdown.days, word: parameters.words.days },\n                { value: hours, section: countdown.hours, word: parameters.words.hours },\n                { value: minutes, section: countdown.minutes, word: parameters.words.minutes },\n                { value: seconds, section: countdown.seconds, word: parameters.words.seconds }\n            ];\n\n            values.forEach(({ value, section, word }) => {\n                if (!parameters.removeZeroUnits || value > 0) {\n                    const displayValue = parameters.zeroPad ? String(value).padStart(2, '0') : value;\n                    const wordValue = word.lambda(word.root, value);\n                    updateCountdownSection(section, displayValue, wordValue);\n                    section.style.display = '';\n                } else {\n                    section.style.display = 'none';\n                }\n            });\n        }\n    };\n\n    const interval = setInterval(refresh, parameters.refresh);\n    refresh();\n\n    // Cleanup on element removal\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            mutation.removedNodes.forEach((node) => {\n                if (node === targetElement) {\n                    clearInterval(interval);\n                    observer.disconnect();\n                }\n            });\n        });\n    });\n\n    if (targetElement.parentNode) {\n        observer.observe(targetElement.parentNode, { childList: true });\n    }\n};\n\nexport const simplyCountdown = (\n    element: CountdownSelector,\n    args: Partial<CountdownParameters> = defaultParams\n): void => {\n    const parameters: CountdownParameters = { ...defaultParams, ...args };\n\n    if (typeof element === 'string') {\n        const elements = document.querySelectorAll<HTMLElement>(element);\n        elements.forEach((el) => createCountdownInstance(el, parameters));\n    } else if (isNodeList(element)) {\n        element.forEach((el) => createCountdownInstance(el, parameters));\n    } else {\n        createCountdownInstance(element, parameters);\n    }\n};\n\n// UMD export\ndeclare global {\n    interface Window {\n        simplyCountdown: typeof simplyCountdown;\n    }\n}\n\nif (typeof window !== 'undefined') {\n    window.simplyCountdown = simplyCountdown;\n}"],"names":["createCountdownSection","sectionClass","amount","word","section","document","createElement","className","wrap","amount_elem","word_elem","textContent","String","appendChild","defaultParams","year","month","day","hours","minutes","seconds","words","days","lambda","root","n","plural","inline","inlineSeparator","enableUtc","onEnd","refresh","inlineClass","amountClass","wordClass","zeroPad","countUp","removeZeroUnits","createCountdownInstance","targetElement","parameters","targetDate","Date","inlineElement","countdown","container","createCountdown","currentDate","toUTCString","diff","getTime","Math","floor","displayStr","innerHTML","replace","RegExp","value","forEach","amountElement","querySelector","wordElement","updateCountdownSection","padStart","style","display","interval","setInterval","observer","MutationObserver","mutations","mutation","removedNodes","node","clearInterval","disconnect","parentNode","observe","childList","simplyCountdown","element","args","querySelectorAll","el","NodeList","isNodeList","window"],"mappings":"uPAGO,MAAMA,EAAyB,CAClCC,EACAC,EACAC,KAEM,MAAAC,EAAUC,SAASC,cAAc,OAC/BF,EAAAG,UAAY,kBAAkBN,IAEhC,MAAAO,EAAOH,SAASC,cAAc,OAC9BG,EAAcJ,SAASC,cAAc,QACrCI,EAAYL,SAASC,cAAc,QAYlC,OAVPG,EAAYF,UAAY,gBACxBG,EAAUH,UAAY,cAEVE,EAAAE,YAAcC,OAAOV,GACjCQ,EAAUC,YAAcR,EAExBK,EAAKK,YAAYJ,GACjBD,EAAKK,YAAYH,GACjBN,EAAQS,YAAYL,GAEbJ,CAAA,ECXLU,EAAqC,CACvCC,KAAM,KACNC,MAAO,GACPC,IAAK,GACLC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,MAAO,CACHC,KAAM,CAAEC,OAAQ,CAACC,EAAMC,IAAMA,EAAI,EAAID,EAAO,IAAMA,EAAMA,KAAM,OAC9DN,MAAO,CAAEK,OAAQ,CAACC,EAAMC,IAAMA,EAAI,EAAID,EAAO,IAAMA,EAAMA,KAAM,QAC/DL,QAAS,CAAEI,OAAQ,CAACC,EAAMC,IAAMA,EAAI,EAAID,EAAO,IAAMA,EAAMA,KAAM,UACjEJ,QAAS,CAAEG,OAAQ,CAACC,EAAMC,IAAMA,EAAI,EAAID,EAAO,IAAMA,EAAMA,KAAM,WAErEE,QAAQ,EACRC,QAAQ,EACRC,gBAAiB,KACjBC,WAAW,EACXC,MAAO,OACPC,QAAS,IACTC,YAAa,0BACb/B,aAAc,iBACdgC,YAAa,gBACbC,UAAW,cACXC,SAAS,EACTC,SAAS,EACTC,iBAAiB,GAOfC,EAA0B,CAACC,EAA4BC,KACzD,MAAMC,EAAa,IAAIC,KACnBF,EAAWzB,KACXyB,EAAWxB,MAAQ,EACnBwB,EAAWvB,IACXuB,EAAWtB,MACXsB,EAAWrB,QACXqB,EAAWpB,SAIf,IAAIuB,EAAoC,KACpCH,EAAWb,SACKgB,EAAAtC,SAASC,cAAc,QACvCqC,EAAcpC,UAAYiC,EAAWR,YACrCO,EAAc1B,YAAY8B,IAG9B,MAAMC,EAAYJ,EAAWb,OAAS,KDJX,CAC3BkB,IAOA,MAAMvB,EAAOtB,EAAuB,sBAAuB,EAAG,OACxDkB,EAAQlB,EAAuB,uBAAwB,EAAG,QAC1DmB,EAAUnB,EAAuB,yBAA0B,EAAG,UAC9DoB,EAAUpB,EAAuB,yBAA0B,EAAG,UAO7D,OALP6C,EAAUhC,YAAYS,GACtBuB,EAAUhC,YAAYK,GACtB2B,EAAUhC,YAAYM,GACtB0B,EAAUhC,YAAYO,GAEf,CACHE,OACAJ,QACAC,UACAC,UACJ,ECnB6C0B,CAAgBP,GAEvDR,EAAU,KACZ,MAAMgB,EAAcP,EAAWX,UAAY,IAAIa,MAAK,IAAIA,MAAOM,eAAiB,IAAIN,KACpF,IAAIO,EAAOT,EAAWJ,QAChBW,EAAYG,UAAYT,EAAWS,UACnCT,EAAWS,UAAYH,EAAYG,UAErCD,GAAQ,IAAMT,EAAWJ,UAClBa,EAAA,EACHT,EAAWV,OACXU,EAAWV,SAInB,MAAMR,EAAO6B,KAAKC,MAAMH,SAChBA,GAAO,IAAP3B,EAAc,GAAK,GAAK,GAEhC,MAAMJ,EAAQiC,KAAKC,MAAMH,EAAQ,MACzBA,GAAQ,IAAR/B,EAAe,GAAK,GAE5B,MAAMC,EAAUgC,KAAKC,MAAMH,EAAA,KAC3BA,GAAkB,IAAV9B,EAAiB,GAEzB,MAAMC,EAAU+B,KAAKC,MAAMH,EAAO,KAE9B,GAAAT,EAAWb,QAAUgB,EAAe,CACpC,IAAIU,EAAa,GAEXb,EAAWH,iBAA4B,IAATf,IAChC+B,GAAc,GAAG/B,KAAQkB,EAAWnB,MAAMC,KAAKC,OAAOiB,EAAWnB,MAAMC,KAAKE,KAAMF,KAAQkB,EAAWZ,mBAGnGY,EAAWH,iBAA4B,IAATf,GAAwB,IAAVJ,IAC9CmC,GAAc,GAAGnC,KAASsB,EAAWnB,MAAMH,MAAMK,OAAOiB,EAAWnB,MAAMH,MAAMM,KAAMN,KAASsB,EAAWZ,mBAGvGY,EAAWH,iBAA4B,IAATf,GAAwB,IAAVJ,GAA2B,IAAZC,IAC7DkC,GAAc,GAAGlC,KAAWqB,EAAWnB,MAAMF,QAAQI,OAAOiB,EAAWnB,MAAMF,QAAQK,KAAML,KAAWqB,EAAWZ,mBAGrHyB,GAAc,GAAGjC,KAAWoB,EAAWnB,MAAMD,QAAQG,OAAOiB,EAAWnB,MAAMD,QAAQI,KAAMJ,KAE7EuB,EAAAW,UAAYD,EAAWE,QAAQ,IAAIC,OAAO,GAAGhB,EAAWZ,oBAAqB,YACpFgB,EAAW,CACH,CACX,CAAEa,MAAOnC,EAAMlB,QAASwC,EAAUtB,KAAMnB,KAAMqC,EAAWnB,MAAMC,MAC/D,CAAEmC,MAAOvC,EAAOd,QAASwC,EAAU1B,MAAOf,KAAMqC,EAAWnB,MAAMH,OACjE,CAAEuC,MAAOtC,EAASf,QAASwC,EAAUzB,QAAShB,KAAMqC,EAAWnB,MAAMF,SACrE,CAAEsC,MAAOrC,EAAShB,QAASwC,EAAUxB,QAASjB,KAAMqC,EAAWnB,MAAMD,UAGlEsC,SAAQ,EAAGD,QAAOrD,UAASD,WAC9B,IAAKqC,EAAWH,iBAAmBoB,EAAQ,EAAG,CD5ExB,EAClCrD,EACAF,EACAC,KAEM,MAAAwD,EAAgBvD,EAAQwD,cAAc,kBACtCC,EAAczD,EAAQwD,cAAc,gBAEtCD,IACcA,EAAAhD,YAAcC,OAAOV,IAEnC2D,IACAA,EAAYlD,YAAcR,EAAA,ECmES2D,CAAA1D,EAFFoC,EAAWL,QAAUvB,OAAO6C,GAAOM,SAAS,EAAG,KAAON,EACzDtD,EAAKoB,OAAOpB,EAAKqB,KAAMiC,IAEzCrD,EAAQ4D,MAAMC,QAAU,EAAA,MAExB7D,EAAQ4D,MAAMC,QAAU,MAAA,GAE/B,GAIHC,EAAWC,YAAYpC,EAASS,EAAWT,SACzCA,IAGR,MAAMqC,EAAW,IAAIC,kBAAkBC,IACzBA,EAAAZ,SAASa,IACNA,EAAAC,aAAad,SAASe,IACvBA,IAASlC,IACTmC,cAAcR,GACdE,EAASO,aAAW,GAE3B,GACJ,IAGDpC,EAAcqC,YACdR,EAASS,QAAQtC,EAAcqC,WAAY,CAAEE,WAAW,GAAM,EAIzDC,EAAkB,CAC3BC,EACAC,EAAqCnE,KAErC,MAAM0B,EAAkC,IAAK1B,KAAkBmE,GAE3D,GAAmB,iBAAZD,EAAsB,CACZ3E,SAAS6E,iBAA8BF,GAC/CtB,SAASyB,GAAO7C,EAAwB6C,EAAI3C,IAAW,KAnHrD,CAACwC,GACTA,aAAmBI,SAmHfC,CAAWL,GAClBA,EAAQtB,SAASyB,GAAO7C,EAAwB6C,EAAI3C,KAEpDF,EAAwB0C,EAASxC,EAAU,EAW7B,oBAAX8C,SACPA,OAAOP,gBAAkBA"}