{"version":3,"file":"simplyCountdown.umd.js","sources":["../src/core/dom.ts","../src/core/simplyCountdown.ts"],"sourcesContent":["/**\n * Creates a countdown section element\n */\nexport const createCountdownSection = (\n    sectionClass: string,\n    amount: number,\n    word: string\n): HTMLElement => {\n    const section = document.createElement('div');\n    section.className = `simply-section ${sectionClass}`;\n\n    const wrap = document.createElement('div');\n    const amount_elem = document.createElement('span');\n    const word_elem = document.createElement('span');\n\n    amount_elem.className = 'simply-amount';\n    word_elem.className = 'simply-word';\n\n    amount_elem.textContent = String(amount);\n    word_elem.textContent = word;\n\n    wrap.appendChild(amount_elem);\n    wrap.appendChild(word_elem);\n    section.appendChild(wrap);\n\n    return section;\n};\n\n/**\n * Retrieves a countdown section element from a container\n */\nexport const getCountdownSection = (\n    sectionClass: string,\n    container: HTMLElement\n): HTMLElement | null => {\n    return container.querySelector(`.simply-section.${sectionClass}`);\n};\n\n/**\n * Updates a countdown section element\n */\nexport const updateCountdownSection = (\n    section: HTMLElement,\n    amount: number | string,\n    word: string\n): void => {\n    const amountElement = section.querySelector('.simply-amount');\n    const wordElement = section.querySelector('.simply-word');\n\n    if (amountElement) {\n        amountElement.textContent = String(amount);\n    }\n    if (wordElement) {\n        wordElement.textContent = word;\n    }\n};\n\n/**\n * Creates all countdown elements\n */\nexport const createCountdown = (\n    container: HTMLElement\n): {\n    days: HTMLElement;\n    hours: HTMLElement;\n    minutes: HTMLElement;\n    seconds: HTMLElement;\n} => {\n    const days = createCountdownSection('simply-days-section', 0, 'day');\n    const hours = createCountdownSection('simply-hours-section', 0, 'hour');\n    const minutes = createCountdownSection('simply-minutes-section', 0, 'minute');\n    const seconds = createCountdownSection('simply-seconds-section', 0, 'second');\n\n    container.appendChild(days);\n    container.appendChild(hours);\n    container.appendChild(minutes);\n    container.appendChild(seconds);\n\n    return {\n        days,\n        hours,\n        minutes,\n        seconds\n    };\n};\n","/*!\n * Project : simplyCountdown\n * Date : 2024-12-24\n * License : MIT\n * Version : 3.0.0\n * Author : Vincent Loy-Serre <vincent.loy1@gmail.com>\n * Contributors :\n *  - Justin Beasley <JustinB@harvest.org>\n *  - Nathan Smith <NathanS@harvest.org>\n */\n\nimport type { CountdownParameters, CountdownSelector } from '../types';\nimport { createCountdown, updateCountdownSection } from './dom';\n\nconst defaultParams: CountdownParameters = {\n    year: 2024,\n    month: 12,\n    day: 25,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    words: {\n        days: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'day' },\n        hours: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'hour' },\n        minutes: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'minute' },\n        seconds: { lambda: (root, n) => n > 1 ? root + 's' : root, root: 'second' }\n    },\n    plural: true,\n    inline: false,\n    inlineSeparator: ', ',\n    enableUtc: false,\n    onEnd: () => {},\n    refresh: 1000,\n    inlineClass: 'simply-countdown-inline',\n    sectionClass: 'simply-section',\n    amountClass: 'simply-amount',\n    wordClass: 'simply-word',\n    zeroPad: false,\n    countUp: false,\n    removeZeroUnits: false\n};\n\nconst isNodeList = (element: CountdownSelector): element is NodeListOf<HTMLElement> => {\n    return element instanceof NodeList;\n};\n\ninterface TimeUnit {\n    value: number;\n    word: keyof CountdownParameters['words'];\n    element?: HTMLElement;\n}\n\n/**\n * Formats a time unit with optional zero padding and pluralization\n * @param unit - The time unit object containing value and word properties\n * @param params - The countdown parameters containing formatting options and word definitions\n * @returns A formatted string containing the value and pluralized word for the time unit\n * @example\n * // With zeroPad: true\n * formatTimeUnit({value: 5, word: 'days'}, params) // returns \"05 days\"\n * // With zeroPad: false\n * formatTimeUnit({value: 5, word: 'days'}, params) // returns \"5 days\"\n */\nfunction formatTimeUnit(unit: TimeUnit, params: CountdownParameters): string {\n    const value = params.zeroPad ? String(unit.value).padStart(2, '0') : unit.value;\n    return `${value} ${params.words[unit.word].lambda(params.words[unit.word].root, unit.value)}`;\n}\n\n/**\n * Determines whether a time unit should be displayed based on its value and the values of previous units\n * @param unit - The current time unit to evaluate\n * @param previousUnits - Array of time units that come before the current unit\n * @param params - Configuration parameters for the countdown\n * @returns True if the unit should be displayed, false otherwise\n * \n * If removeZeroUnits is false in params, always returns true.\n * Otherwise, returns true if either:\n * - The current unit value is not zero\n * - Any previous unit has a non-zero value\n */\nfunction shouldDisplay(unit: TimeUnit, previousUnits: TimeUnit[], params: CountdownParameters): boolean {\n    if (!params.removeZeroUnits) return true;\n    return unit.value !== 0 || previousUnits.some(u => u.value !== 0);\n}\n\n/**\n * Displays the countdown timer inline within the specified HTML element.\n * \n * @param timeUnits - Array of time units containing values and labels for display\n * @param params - Configuration parameters for the countdown display\n * @param element - The HTML element where the countdown will be rendered\n * \n * @remarks\n * The function filters and formats time units based on display rules, then joins them with\n * the specified separator from params.inlineSeparator before setting the element's innerHTML.\n */\nfunction displayInline(timeUnits: TimeUnit[], params: CountdownParameters, element: HTMLElement): void {\n    const displayStr = timeUnits\n        .filter((unit, index) => shouldDisplay(unit, timeUnits.slice(0, index), params))\n        .map(unit => formatTimeUnit(unit as { value: number; word: keyof typeof params.words }, params))\n        .join(params.inlineSeparator);\n\n    element.innerHTML = displayStr;\n}\n\n/**\n * Updates the display of time units in the countdown based on their values and display conditions\n * @param timeUnits - Array of TimeUnit objects containing the time values and their corresponding words\n * @param params - Configuration parameters for the countdown display\n * @param countdown - DOM elements representing the countdown display sections\n * @returns void\n *\n * @remarks\n * This function iterates through each time unit and determines whether it should be shown based on:\n * - If it's the seconds unit (always shown)\n * - If it meets display criteria based on previous units\n * \n * For units that should be shown, it:\n * - Updates the display value (with optional zero padding)\n * - Updates the word label using the configured lambda function\n * - Shows the unit's DOM element\n * \n * For units that shouldn't be shown, it hides their DOM elements\n */\nfunction displayBlocks(timeUnits: TimeUnit[], params: CountdownParameters, countdown: any): void {\n    timeUnits.forEach((unit, index) => {\n        const shouldShow = unit.word === 'seconds' || shouldDisplay(unit, timeUnits.slice(0, index), params);\n        \n        if (shouldShow) {\n            updateCountdownSection(\n                countdown[unit.word],\n                params.zeroPad ? String(unit.value).padStart(2, '0') : unit.value,\n                params.words[unit.word].lambda(params.words[unit.word].root, unit.value)\n            );\n            countdown[unit.word].style.display = '';\n        } else {\n            countdown[unit.word].style.display = 'none';\n        }\n    });\n}\n\nconst createCountdownInstance = (targetElement: HTMLElement, parameters: CountdownParameters) => {\n    const targetDate = new Date(\n        parameters.year,\n        parameters.month - 1,\n        parameters.day,\n        parameters.hours,\n        parameters.minutes,\n        parameters.seconds\n    );\n\n    // Create span element for inline mode\n    let inlineElement: HTMLElement | null = null;\n    if (parameters.inline) {\n        inlineElement = document.createElement('span');\n        inlineElement.className = parameters.inlineClass;\n        targetElement.appendChild(inlineElement);\n    }\n\n    const countdown = parameters.inline ? null : createCountdown(targetElement);\n\n    const refresh = () => {\n        const currentDate = parameters.enableUtc ? new Date(new Date().toUTCString()) : new Date();\n        let diff = parameters.countUp\n            ? currentDate.getTime() - targetDate.getTime()\n            : targetDate.getTime() - currentDate.getTime();\n\n        if (diff <= 0 && !parameters.countUp) {\n            diff = 0;\n            if (parameters.onEnd) {\n                parameters.onEnd();\n            }\n        }\n\n        const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n        diff -= days * 1000 * 60 * 60 * 24;\n\n        const hours = Math.floor(diff / (1000 * 60 * 60));\n        diff -= hours * 1000 * 60 * 60;\n\n        const minutes = Math.floor(diff / (1000 * 60));\n        diff -= minutes * 1000 * 60;\n\n        const seconds = Math.floor(diff / 1000);\n\n        if (parameters.inline && inlineElement) {\n            const timeUnits: TimeUnit[] = [\n                { value: days, word: 'days' as keyof CountdownParameters['words'] },\n                { value: hours, word: 'hours' as keyof CountdownParameters['words'] },\n                { value: minutes, word: 'minutes' as keyof CountdownParameters['words'] },\n                { value: seconds, word: 'seconds' as keyof CountdownParameters['words'] }\n            ];\n            displayInline(timeUnits, parameters, inlineElement);\n        } else if (countdown) {\n            const timeUnits: TimeUnit[] = [\n                { value: days, word: 'days' as keyof CountdownParameters['words'] },\n                { value: hours, word: 'hours' as keyof CountdownParameters['words'] },\n                { value: minutes, word: 'minutes' as keyof CountdownParameters['words'] },\n                { value: seconds, word: 'seconds' as keyof CountdownParameters['words'] }\n            ];\n            displayBlocks(timeUnits, parameters, countdown);\n        }\n    };\n\n    const interval = setInterval(refresh, parameters.refresh);\n    refresh();\n\n    // Cleanup on element removal\n    const observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n            mutation.removedNodes.forEach((node) => {\n                if (node === targetElement) {\n                    clearInterval(interval);\n                    observer.disconnect();\n                }\n            });\n        });\n    });\n\n    if (targetElement.parentNode) {\n        observer.observe(targetElement.parentNode, { childList: true });\n    }\n};\n\nexport const simplyCountdown = (\n    element: CountdownSelector,\n    args: Partial<CountdownParameters> = defaultParams\n): void => {\n    const parameters: CountdownParameters = { ...defaultParams, ...args };\n\n    if (typeof element === 'string') {\n        const elements = document.querySelectorAll<HTMLElement>(element);\n        elements.forEach((el) => createCountdownInstance(el, parameters));\n    } else if (isNodeList(element)) {\n        element.forEach((el) => createCountdownInstance(el, parameters));\n    } else {\n        createCountdownInstance(element, parameters);\n    }\n};\n\n// UMD export\ndeclare global {\n    interface Window {\n        simplyCountdown: typeof simplyCountdown;\n    }\n}\n\nif (typeof window !== 'undefined') {\n    window.simplyCountdown = simplyCountdown;\n}"],"names":["createCountdownSection","sectionClass","amount","word","section","document","createElement","className","wrap","amount_elem","word_elem","textContent","String","appendChild","defaultParams","year","month","day","hours","minutes","seconds","words","days","lambda","root","n","plural","inline","inlineSeparator","enableUtc","onEnd","refresh","inlineClass","amountClass","wordClass","zeroPad","countUp","removeZeroUnits","shouldDisplay","unit","previousUnits","params","value","some","u","displayInline","timeUnits","element","displayStr","filter","index","slice","map","padStart","formatTimeUnit","join","innerHTML","displayBlocks","countdown","forEach","amountElement","querySelector","wordElement","updateCountdownSection","style","display","createCountdownInstance","targetElement","parameters","targetDate","Date","inlineElement","container","createCountdown","currentDate","toUTCString","diff","getTime","Math","floor","interval","setInterval","observer","MutationObserver","mutations","mutation","removedNodes","node","clearInterval","disconnect","parentNode","observe","childList","simplyCountdown","args","querySelectorAll","el","NodeList","isNodeList","window"],"mappings":"uPAGO,MAAMA,EAAyB,CAClCC,EACAC,EACAC,KAEM,MAAAC,EAAUC,SAASC,cAAc,OAC/BF,EAAAG,UAAY,kBAAkBN,IAEhC,MAAAO,EAAOH,SAASC,cAAc,OAC9BG,EAAcJ,SAASC,cAAc,QACrCI,EAAYL,SAASC,cAAc,QAYlC,OAVPG,EAAYF,UAAY,gBACxBG,EAAUH,UAAY,cAEVE,EAAAE,YAAcC,OAAOV,GACjCQ,EAAUC,YAAcR,EAExBK,EAAKK,YAAYJ,GACjBD,EAAKK,YAAYH,GACjBN,EAAQS,YAAYL,GAEbJ,CAAA,ECXLU,EAAqC,CACvCC,KAAM,KACNC,MAAO,GACPC,IAAK,GACLC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,MAAO,CACHC,KAAM,CAAEC,OAAQ,CAACC,EAAMC,IAAMA,EAAI,EAAID,EAAO,IAAMA,EAAMA,KAAM,OAC9DN,MAAO,CAAEK,OAAQ,CAACC,EAAMC,IAAMA,EAAI,EAAID,EAAO,IAAMA,EAAMA,KAAM,QAC/DL,QAAS,CAAEI,OAAQ,CAACC,EAAMC,IAAMA,EAAI,EAAID,EAAO,IAAMA,EAAMA,KAAM,UACjEJ,QAAS,CAAEG,OAAQ,CAACC,EAAMC,IAAMA,EAAI,EAAID,EAAO,IAAMA,EAAMA,KAAM,WAErEE,QAAQ,EACRC,QAAQ,EACRC,gBAAiB,KACjBC,WAAW,EACXC,MAAO,OACPC,QAAS,IACTC,YAAa,0BACb/B,aAAc,iBACdgC,YAAa,gBACbC,UAAW,cACXC,SAAS,EACTC,SAAS,EACTC,iBAAiB,GAyCZ,SAAAC,EAAcC,EAAgBC,EAA2BC,GAC1D,OAACA,EAAOJ,kBACU,IAAfE,EAAKG,OAAeF,EAAcG,MAAUC,GAAY,IAAZA,EAAEF,QACzD,CAaS,SAAAG,EAAcC,EAAuBL,EAA6BM,GACjE,MAAAC,EAAaF,EACdG,QAAO,CAACV,EAAMW,IAAUZ,EAAcC,EAAMO,EAAUK,MAAM,EAAGD,GAAQT,KACvEW,KAAYb,GApCZ,SAAeA,EAAgBE,GAEpC,MAAO,GADOA,EAAON,QAAUvB,OAAO2B,EAAKG,OAAOW,SAAS,EAAG,KAAOd,EAAKG,SACvDD,EAAOpB,MAAMkB,EAAKpC,MAAMoB,OAAOkB,EAAOpB,MAAMkB,EAAKpC,MAAMqB,KAAMe,EAAKG,QACzF,CAiCqBY,CAAef,EAA4DE,KACvFc,KAAKd,EAAOb,iBAEjBmB,EAAQS,UAAYR,CACxB,CAqBS,SAAAS,EAAcX,EAAuBL,EAA6BiB,GAC7DZ,EAAAa,SAAQ,CAACpB,EAAMW,KACY,YAAdX,EAAKpC,MAAsBmC,EAAcC,EAAMO,EAAUK,MAAM,EAAGD,GAAQT,IDrF/D,EAClCrC,EACAF,EACAC,KAEM,MAAAyD,EAAgBxD,EAAQyD,cAAc,kBACtCC,EAAc1D,EAAQyD,cAAc,gBAEtCD,IACcA,EAAAjD,YAAcC,OAAOV,IAEnC4D,IACAA,EAAYnD,YAAcR,EAAA,EC4EtB4D,CACIL,EAAUnB,EAAKpC,MACfsC,EAAON,QAAUvB,OAAO2B,EAAKG,OAAOW,SAAS,EAAG,KAAOd,EAAKG,MAC5DD,EAAOpB,MAAMkB,EAAKpC,MAAMoB,OAAOkB,EAAOpB,MAAMkB,EAAKpC,MAAMqB,KAAMe,EAAKG,QAEtEgB,EAAUnB,EAAKpC,MAAM6D,MAAMC,QAAU,IAErCP,EAAUnB,EAAKpC,MAAM6D,MAAMC,QAAU,MAAA,GAGjD,CAEM,MAAAC,EAA0B,CAACC,EAA4BC,KACzD,MAAMC,EAAa,IAAIC,KACnBF,EAAWrD,KACXqD,EAAWpD,MAAQ,EACnBoD,EAAWnD,IACXmD,EAAWlD,MACXkD,EAAWjD,QACXiD,EAAWhD,SAIf,IAAImD,EAAoC,KACpCH,EAAWzC,SACK4C,EAAAlE,SAASC,cAAc,QACvCiE,EAAchE,UAAY6D,EAAWpC,YACrCmC,EAActD,YAAY0D,IAG9B,MAAMb,EAAYU,EAAWzC,OAAS,KDnGX,CAC3B6C,IAOA,MAAMlD,EAAOtB,EAAuB,sBAAuB,EAAG,OACxDkB,EAAQlB,EAAuB,uBAAwB,EAAG,QAC1DmB,EAAUnB,EAAuB,yBAA0B,EAAG,UAC9DoB,EAAUpB,EAAuB,yBAA0B,EAAG,UAO7D,OALPwE,EAAU3D,YAAYS,GACtBkD,EAAU3D,YAAYK,GACtBsD,EAAU3D,YAAYM,GACtBqD,EAAU3D,YAAYO,GAEf,CACHE,OACAJ,QACAC,UACAC,UACJ,EC4E6CqD,CAAgBN,GAEvDpC,EAAU,KACZ,MAAM2C,EAAcN,EAAWvC,UAAY,IAAIyC,MAAK,IAAIA,MAAOK,eAAiB,IAAIL,KACpF,IAAIM,EAAOR,EAAWhC,QAChBsC,EAAYG,UAAYR,EAAWQ,UACnCR,EAAWQ,UAAYH,EAAYG,UAErCD,GAAQ,IAAMR,EAAWhC,UAClBwC,EAAA,EACHR,EAAWtC,OACXsC,EAAWtC,SAInB,MAAMR,EAAOwD,KAAKC,MAAMH,SAChBA,GAAO,IAAPtD,EAAc,GAAK,GAAK,GAEhC,MAAMJ,EAAQ4D,KAAKC,MAAMH,EAAQ,MACzBA,GAAQ,IAAR1D,EAAe,GAAK,GAE5B,MAAMC,EAAU2D,KAAKC,MAAMH,EAAA,KAC3BA,GAAkB,IAAVzD,EAAiB,GAEzB,MAAMC,EAAU0D,KAAKC,MAAMH,EAAO,KAE9B,GAAAR,EAAWzC,QAAU4C,EAAe,CAOtB1B,EANgB,CAC1B,CAAEH,MAAOpB,EAAMnB,KAAM,QACrB,CAAEuC,MAAOxB,EAAOf,KAAM,SACtB,CAAEuC,MAAOvB,EAAShB,KAAM,WACxB,CAAEuC,MAAOtB,EAASjB,KAAM,YAEHiE,EAAYG,WAC9Bb,EAAW,CAOJD,EANgB,CAC1B,CAAEf,MAAOpB,EAAMnB,KAAM,QACrB,CAAEuC,MAAOxB,EAAOf,KAAM,SACtB,CAAEuC,MAAOvB,EAAShB,KAAM,WACxB,CAAEuC,MAAOtB,EAASjB,KAAM,YAEHiE,EAAYV,EAAS,GAIhDsB,EAAWC,YAAYlD,EAASqC,EAAWrC,SACzCA,IAGR,MAAMmD,EAAW,IAAIC,kBAAkBC,IACzBA,EAAAzB,SAAS0B,IACNA,EAAAC,aAAa3B,SAAS4B,IACvBA,IAASpB,IACTqB,cAAcR,GACdE,EAASO,aAAW,GAE3B,GACJ,IAGDtB,EAAcuB,YACdR,EAASS,QAAQxB,EAAcuB,WAAY,CAAEE,WAAW,GAAM,EAIzDC,EAAkB,CAC3B9C,EACA+C,EAAqChF,KAErC,MAAMsD,EAAkC,IAAKtD,KAAkBgF,GAE3D,GAAmB,iBAAZ/C,EAAsB,CACZ1C,SAAS0F,iBAA8BhD,GAC/CY,SAASqC,GAAO9B,EAAwB8B,EAAI5B,IAAW,KA9LrD,CAACrB,GACTA,aAAmBkD,SA8LfC,CAAWnD,GAClBA,EAAQY,SAASqC,GAAO9B,EAAwB8B,EAAI5B,KAEpDF,EAAwBnB,EAASqB,EAAU,EAW7B,oBAAX+B,SACPA,OAAON,gBAAkBA"}