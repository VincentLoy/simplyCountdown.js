{"version":3,"file":"simplyCountdown.iife.js","sources":["../src/core/simplyCountdown.js"],"sourcesContent":["/* global Symbol */\n\n/*!\n* Project : simply-countdown\n* Date : 06/12/2024\n* License : MIT\n* Version : 2.0.1\n* Author : Vincent Loy <vincent.loy1@gmail.com>\n* Contributors :\n*  - Justin Beasley <JustinB@harvest.org>\n*  - Nathan Smith <NathanS@harvest.org>\n*/\n\n/**\n * Function that merge user parameters with defaults one.\n * @param output\n * @returns {*|{}}\n */\n\nlet extend = function (output) {\n    let obj;\n    let out = output || {};\n\n    for (let i = 1; i < arguments.length; i += 1) {\n        obj = arguments[i];\n        const keys = Object.keys(obj);\n\n        if (keys.length) {\n            for (let i2 = 0; i2 < keys.length; i2 += 1) {\n                let key = keys[i2];\n\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    if (typeof obj[key] === 'object') {\n                        extend(out[key], obj[key]);\n                    } else {\n                        out[key] = obj[key];\n                    }\n                }\n            }\n        }\n    }\n\n    return out;\n};\n\nlet isIterableElement = (val) => {\n    return val !== null && Symbol.iterator in Object(val);\n};\n\n/**\n * Function that create a countdown section\n * @param countdown\n * @param parameters\n * @param typeClass\n * @returns {{full: (*|Element), amount: (*|Element), word: (*|Element)}}\n */\nlet createCountdownElt = (countdown, parameters, typeClass) => {\n    let sectionTag = document.createElement('div');\n    let amountTag = document.createElement('span');\n    let wordTag = document.createElement('span');\n    let innerSectionTag = document.createElement('div');\n\n    innerSectionTag.appendChild(amountTag);\n    innerSectionTag.appendChild(wordTag);\n    sectionTag.appendChild(innerSectionTag);\n\n    sectionTag.classList.add(parameters.sectionClass);\n    sectionTag.classList.add(typeClass);\n    amountTag.classList.add(parameters.amountClass);\n    wordTag.classList.add(parameters.wordClass);\n\n    countdown.appendChild(sectionTag);\n\n    return {\n        full: sectionTag,\n        amount: amountTag,\n        word: wordTag\n    };\n};\n\n/**\n * Function that create full countdown DOM elements calling createCountdownElt\n * @param parameters\n * @param countdown\n * @returns {{days:(*|Element), hours:(*|Element), minutes:(*|Element), seconds:(*|Element)}}\n */\nlet createElements = (parameters, countdown) => {\n    let spanTag;\n\n    if (!parameters.inline) {\n        return {\n            days: createCountdownElt(countdown, parameters, 'simply-days-section'),\n            hours: createCountdownElt(countdown, parameters, 'simply-hours-section'),\n            minutes: createCountdownElt(countdown, parameters, 'simply-minutes-section'),\n            seconds: createCountdownElt(countdown, parameters, 'simply-seconds-section')\n        };\n    }\n\n    spanTag = document.createElement('span');\n    spanTag.classList.add(parameters.inlineClass);\n    countdown.appendChild(spanTag);\n\n    return {\n        days: spanTag,\n        hours: spanTag,\n        minutes: spanTag,\n        seconds: spanTag\n    };\n};\n\n/**\n * simplyCountdown, create and display the countdown.\n * @param elt\n * @param args (parameters)\n */\nexport const simplyCountdown = function (elt, args) {\n    const eltProto = Object.getPrototypeOf(elt);\n    let parameters = extend({\n        year: 2015,\n        month: 6,\n        day: 28,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        words: {\n            days: {lambda: (root, n) => {return n > 1 ? root + \"s\" : root }, root: 'day'},\n            hours: {lambda: (root, n) => {return n > 1 ? root + \"s\" : root }, root: 'hour'},\n            minutes: {lambda: (root, n) => {return n > 1 ? root + \"s\" : root }, root: 'minute'},\n            seconds: {lambda: (root, n) => {return n > 1 ? root + \"s\" : root }, root: 'second'}\n        },\n        plural: true,\n        inline: false,\n        inlineSeparator: ', ',\n        enableUtc: false,\n        onEnd: () => {\n        },\n        refresh: 1000,\n        inlineClass: 'simply-countdown-inline',\n        sectionClass: 'simply-section',\n        amountClass: 'simply-amount',\n        wordClass: 'simply-word',\n        zeroPad: false,\n        removeZeroUnits: false,\n        countUp: false\n    }, args);\n    let interval;\n    let targetDate;\n    let now;\n    let secondsLeft;\n    let days;\n    let hours;\n    let minutes;\n    let seconds;\n    let cd;\n\n    // console.log(typeof elt);\n    //\n    if (eltProto === String.prototype) {\n        cd = document.querySelectorAll(elt);\n    } else {\n        cd = elt;\n    }\n\n    if (parameters.enableUtc) {\n        // Use UTC for target date\n        targetDate = new Date(Date.UTC(\n            parameters.year,\n            parameters.month - 1,\n            parameters.day,\n            parameters.hours,\n            parameters.minutes,\n            parameters.seconds\n        ));\n    } else {\n        // Use local time for target date\n        targetDate = new Date(\n            parameters.year,\n            parameters.month - 1,\n            parameters.day,\n            parameters.hours,\n            parameters.minutes,\n            parameters.seconds\n        );\n    }\n\n    let runCountdown = (theCountdown) => {\n        let countdown = theCountdown;\n        let fullCountDown = createElements(parameters, countdown);\n        let refresh;\n\n        refresh = function () {\n            let dayWord;\n            let hourWord;\n            let minuteWord;\n            let secondWord;\n\n            let updateDisplayDate = () => {\n                days = parseInt(secondsLeft / 86400, 10);\n                secondsLeft %= 86400;\n\n                hours = parseInt(secondsLeft / 3600, 10);\n                secondsLeft %= 3600;\n\n                minutes = parseInt(secondsLeft / 60, 10);\n                seconds = parseInt(secondsLeft % 60, 10);\n            };\n\n            if (parameters.enableUtc) {\n                // Calculate \"now\" in UTC\n                now = new Date();\n                now = new Date(Date.UTC(\n                    now.getUTCFullYear(),\n                    now.getUTCMonth(),\n                    now.getUTCDate(),\n                    now.getUTCHours(),\n                    now.getUTCMinutes(),\n                    now.getUTCSeconds()\n                ));\n            } else {\n                // Calculate \"now\" in local time\n                now = new Date();\n            }\n\n            secondsLeft = Math.floor((targetDate - now.getTime()) / 1000);\n\n            if (secondsLeft > 0) {\n                updateDisplayDate();\n            } else if (parameters.countUp) {\n                secondsLeft = (now.getTime() - targetDate) / 1000;\n                updateDisplayDate();\n            } else {\n                days = 0;\n                hours = 0;\n                minutes = 0;\n                seconds = 0;\n                window.clearInterval(interval);\n                parameters.onEnd();\n            }\n\n            let getWord = (obj, n) => {\n                return obj.hasOwnProperty('lambda')\n                    ? obj.lambda(obj.root, n)\n                    : obj.root\n            };\n            let words = parameters.words;\n            dayWord = getWord(words.days, days);\n            hourWord = getWord(words.hours, hours);\n            minuteWord = getWord(words.minutes, minutes);\n            secondWord = getWord(words.seconds, seconds);\n\n            /* display an inline countdown into a span tag */\n            if (parameters.inline) {\n                let displayStr = '';\n\n                if (!(parameters.removeZeroUnits && days === 0)) {\n                    displayStr += `${days} ${dayWord}${parameters.inlineSeparator}`;\n                }\n\n                if (!(parameters.removeZeroUnits && days === 0 && hours === 0)) {\n                    displayStr += `${hours} ${hourWord}${parameters.inlineSeparator}`;\n                }\n\n                if (!(parameters.removeZeroUnits && days === 0 && hours === 0 && minutes === 0)) {\n                    displayStr += `${minutes} ${minuteWord}${parameters.inlineSeparator}`;\n                }\n\n                // Seconds should always be displayed\n                displayStr += `${seconds} ${secondWord}`;\n\n                countdown.innerHTML = displayStr.replace(/, $/, ''); // Remove trailing comma if any\n            } else {\n                if (!(parameters.removeZeroUnits && days === 0)) {\n                    fullCountDown.days.amount.textContent = (parameters.zeroPad && days.toString().length < 2 ? '0' : '') + days;\n                    fullCountDown.days.word.textContent = dayWord;\n                    fullCountDown.days.full.style.display = '';\n                } else {\n                    fullCountDown.days.full.style.display = 'none';\n                }\n\n                if (!(parameters.removeZeroUnits && days === 0 && hours === 0)) {\n                    fullCountDown.hours.amount.textContent = (parameters.zeroPad && hours.toString().length < 2 ? '0' : '') + hours;\n                    fullCountDown.hours.word.textContent = hourWord;\n                    fullCountDown.hours.full.style.display = '';\n                } else {\n                    fullCountDown.hours.full.style.display = 'none';\n                }\n\n                if (!(parameters.removeZeroUnits && days === 0 && hours === 0 && minutes === 0)) {\n                    fullCountDown.minutes.amount.textContent = (parameters.zeroPad && minutes.toString().length < 2 ? '0' : '') + minutes;\n                    fullCountDown.minutes.word.textContent = minuteWord;\n                    fullCountDown.minutes.full.style.display = '';\n                } else {\n                    fullCountDown.minutes.full.style.display = 'none';\n                }\n\n                // Seconds should always be displayed\n                fullCountDown.seconds.amount.textContent = (parameters.zeroPad && seconds.toString().length < 2 ? '0' : '') + seconds;\n                fullCountDown.seconds.word.textContent = secondWord;\n                fullCountDown.seconds.full.style.display = '';\n            }\n        };\n\n        // Refresh immediately to prevent a Flash of Unstyled Content\n        refresh();\n        interval = window.setInterval(refresh, parameters.refresh);\n    };\n\n    if (!isIterableElement(cd)) {\n        runCountdown(cd);\n    } else {\n        Array.prototype.forEach.call(cd, (cdElt) => {\n            runCountdown(cdElt);\n        });\n    }\n};\n\n// Export for CommonJS and AMD\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = { simplyCountdown };\n} else if (typeof define === 'function' && define.amd) {\n    define([], function() {\n        return { simplyCountdown };\n    });\n}\n"],"names":["extend","output","obj","out","i","keys","i2","key","isIterableElement","val","createCountdownElt","countdown","parameters","typeClass","sectionTag","amountTag","wordTag","innerSectionTag","createElements","spanTag","simplyCountdown","elt","args","eltProto","root","n","interval","targetDate","now","secondsLeft","days","hours","minutes","seconds","cd","runCountdown","theCountdown","fullCountDown","refresh","dayWord","hourWord","minuteWord","secondWord","updateDisplayDate","getWord","words","displayStr","cdElt"],"mappings":"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"}